(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{332:function(t,e,a){"use strict";a.r(e);var n=a(10),s=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"react"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[t._v("#")]),t._v(" React")]),t._v(" "),e("h2",{attrs:{id:"jsx简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsx简介"}},[t._v("#")]),t._v(" JSX简介")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const name = 'lwq';\nconst element = <h1>Hello world，{name}</h1>;\nconst user = {\n    firstName:'harper';//对象属性的赋值使用冒号\n    lastName:'end'\n}; //it's all ok\n")])])]),e("p",[t._v("这样的标签语法既不是字符串也不是html，它被称之为JSX，是一个JavaScript的语法拓展，建议在React中配合使用JSX。")]),t._v(" "),e("p",[t._v("在 JSX 语法中，你可以在大括号内放置任何有效的 "),e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 表达式"),e("OutboundLink")],1),t._v("。例如，"),e("code",[t._v("2 + 2")]),t._v("，"),e("code",[t._v("user.firstName")]),t._v(" 或 "),e("code",[t._v("formatName(user)")]),t._v(" 都是有效的 JavaScript 表达式。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const element = (\n  <h1>\n    Hello, {formatName(user)}!\n  </h1>\n);\n//这里 formatName是一个函数\n")])])]),e("h2",{attrs:{id:"元素渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元素渲染"}},[t._v("#")]),t._v(" 元素渲染")]),t._v(" "),e("p",[t._v("html中有一处")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    \n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("我们称之为根dom节点，该节点的所有内容都会由React DOM管理")]),t._v(" "),e("p",[t._v("想要把一个React元素渲染到根dom节点，只要把他们传入ReactDOM.render();")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('const element = <h1>hello</h1>;\nReactDOM.render(element, document.getElementById("root"));\n')])])]),e("h2",{attrs:{id:"组件-props"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件-props"}},[t._v("#")]),t._v(" 组件&Props")]),t._v(" "),e("h3",{attrs:{id:"函数组件和class组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数组件和class组件"}},[t._v("#")]),t._v(" 函数组件和class组件")]),t._v(" "),e("p",[t._v("组件名大写首字母")]),t._v(" "),e("p",[t._v("1.定义组件最简单的方法就是编写js函数")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Welcome")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h1"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" hello "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("props"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("h1"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("该函数是一个有效的React组件，他接受唯一带有数据的props（代表属性）对象并返回一个React元素，这些就是函数组件，本质是一个函数")]),t._v(" "),e("p",[t._v("2.使用ES6的class来定义组件")]),t._v(" "),e("div",{staticClass:"language-React extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Welcome extends React.Component{\n    ...\n    render(){\n        ...\n        return <h1> hwllo,{this.props.name}</h1>;\n    }\n}\n")])])]),e("h3",{attrs:{id:"组件渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件渲染"}},[t._v("#")]),t._v(" 组件渲染")]),t._v(" "),e("p",[t._v("之前我们渲染的React元素都是DOM标签")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[t._v("const element = "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("hello"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(";\n")])])]),e("p",[t._v("但，React元素也可以是自定义的组件")]),t._v(" "),e("div",{staticClass:"language-React extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('const element = <Welcome name="Sara" />;\n')])])]),e("p",[e("strong",[t._v("当React元素为自定义组件时，它会将JSX所接受的属性(attributes)以及子组件转换为单个对象传递给组件，这个对象就是props")])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nconst element = <Welcome name=\"Sara\" />;\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);\n\n")])])]),e("h3",{attrs:{id:"组合组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组合组件"}},[t._v("#")]),t._v(" 组合组件")]),t._v(" "),e("p",[t._v("组件可以在其输出中引用其他组件。这就可以让我们用同一组件来抽象出任意层次的细节。按钮，表单，对话框，甚至整个屏幕的内容：在 React 应用程序中，这些通常都会以组件的形式表示。")]),t._v(" "),e("p",[t._v("例如，我们可以创建一个可以多次渲染 "),e("code",[t._v("Welcome")]),t._v(" 组件的 "),e("code",[t._v("App")]),t._v(" 组件：")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nfunction App() {\n  return (\n    <div>\n      <Welcome name="Sara" />\n      <Welcome name="Cahal" />\n      <Welcome name="Edite" />\n    </div>\n  );\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\'root\')\n);\n')])])]),e("h3",{attrs:{id:"提取组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提取组件"}},[t._v("#")]),t._v(" 提取组件")]),t._v(" "),e("p",[t._v("将组件拆分为小组件")]),t._v(" "),e("h2",{attrs:{id:"state-生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#state-生命周期"}},[t._v("#")]),t._v(" State&生命周期")]),t._v(" "),e("p",[t._v("将函数组件转换为class组件")]),t._v(" "),e("p",[t._v("通过以下五步将 "),e("code",[t._v("Clock")]),t._v(" 的函数组件转成 class 组件：")]),t._v(" "),e("ol",[e("li",[t._v("创建一个同名的 "),e("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES6 class"),e("OutboundLink")],1),t._v("，并且继承于 "),e("code",[t._v("React.Component")]),t._v("。")]),t._v(" "),e("li",[t._v("添加一个空的 "),e("code",[t._v("render()")]),t._v(" 方法。")]),t._v(" "),e("li",[t._v("将函数体移动到 "),e("code",[t._v("render()")]),t._v(" 方法之中。")]),t._v(" "),e("li",[t._v("在 "),e("code",[t._v("render()")]),t._v(" 方法中使用 "),e("code",[t._v("this.props")]),t._v(" 替换 "),e("code",[t._v("props")]),t._v("。")]),t._v(" "),e("li",[t._v("删除剩余的空函数声明。")])]),t._v(" "),e("h3",{attrs:{id:"state的更新可能是异步的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#state的更新可能是异步的"}},[t._v("#")]),t._v(" state的更新可能是异步的")]),t._v(" "),e("p",[t._v("出于性能考虑，React 可能会把多个 "),e("code",[t._v("setState()")]),t._v(" 调用合并成一个调用。")]),t._v(" "),e("p",[t._v("因为 "),e("code",[t._v("this.props")]),t._v(" 和 "),e("code",[t._v("this.state")]),t._v(" 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。")]),t._v(" "),e("p",[t._v("例如，此代码可能会无法更新计数器：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// Wrong\nthis.setState({\n  counter: this.state.counter + this.props.increment,\n});\n")])])]),e("p",[t._v("要解决这个问题，可以让 "),e("code",[t._v("setState()")]),t._v(" 接收一个函数而不是一个对象。这个函数用上一个 state 作为第一个参数，将此次更新被应用时的 props 做为第二个参数：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// Correct\nthis.setState((state, props) => ({\n  counter: state.counter + props.increment\n}));\n")])])]),e("h2",{attrs:{id:"事件处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件处理"}},[t._v("#")]),t._v(" 事件处理")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("React事件的命名采用小驼峰")])]),t._v(" "),e("li",[e("p",[t._v("使用JSX语法时需要传入一个函数作为事件处理函数，而不是字符串")]),t._v(" "),e("p",[t._v("例如传统的HTML")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("button")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token special-attr"}},[e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("onClick")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),e("span",{pre:!0,attrs:{class:"token value javascript language-javascript"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("activeLasers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    Click Here\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("button")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("但，在React中")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<button onClick={activeLasers}>\n\tClick Here\n</button>\n")])])])])]),t._v(" "),e("p",[t._v("在React中另一个不同点时不能通过返回false来阻止默认行为。必须显示的使用preventDefault,例如传统的HTML阻止链接默认打开一个新页面，你可以这样")]),t._v(" "),e("div",{staticClass:"language-Html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("#"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token special-attr"}},[e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("onclick")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),e("span",{pre:!0,attrs:{class:"token value javascript language-javascript"}},[t._v("console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The link was clicked.'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  Click me\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("在React中可能时这样的")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function ActionLink() {\n  function handleClick(e) {    e.preventDefault();    console.log('The link was clicked.');  }\n  return (\n    <a href=\"#\" onClick={handleClick}>      Click me\n    </a>\n );\n}\n")])])]),e("p",[t._v("在这里，"),e("code",[t._v("e")]),t._v(" 是一个合成事件。React 根据 "),e("a",{attrs:{href:"https://www.w3.org/TR/DOM-Level-3-Events/",target:"_blank",rel:"noopener noreferrer"}},[t._v("W3C 规范"),e("OutboundLink")],1),t._v("来定义这些合成事件，所以你不需要担心跨浏览器的兼容性问题。如果想了解更多，请查看 "),e("a",{attrs:{href:"https://react.docschina.org/docs/events.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("SyntheticEvent")]),e("OutboundLink")],1),t._v(" 参考指南。")]),t._v(" "),e("p",[t._v("使用 React 时，你一般不需要使用 "),e("code",[t._v("addEventListener")]),t._v(" 为已创建的 DOM 元素添加监听器。事实上，你只需要在该元素初始渲染的时候添加监听器即可。")]),t._v(" "),e("p",[t._v("当你使用 "),e("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES6 class"),e("OutboundLink")],1),t._v(" 语法定义一个组件的时候，通常的做法是将事件处理函数声明为 class 中的方法。例如，下面的 "),e("code",[t._v("Toggle")]),t._v(" 组件会渲染一个让用户切换开关状态的按钮：")]),t._v(" "),e("p",[e("strong",[t._v("JavaScript函数中的this不是在函数声明的时候，而是在函数运行的时候定义的，React同样遵循JS这特性，所以组件方法的调用者不同会导致this不同")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("onClick={this.handleClick}的“调用者”为事件绑定，来源多样，所以我们想使用组件中的handleClick方法就必须在构造函数中绑定上下文\n")])])]),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Toggle extends React.Component {\n    //在构造函数中绑定handleClick方法的this指定\n  constructor(props) {\n    super(props);\n    this.state = {isToggleOn: true};\n // 为了在回调中使用 `this`，这个绑定是必不可少的 \n   this.handleClick = this.handleClick.bind(this); \n  }\n\n  handleClick() {    this.setState(state => ({      isToggleOn: !state.isToggleOn    }));  }\n  render() {\n    return (\n      <button onClick={this.handleClick}>        {this.state.isToggleOn ? 'ON' : 'OFF'}\n      </button>\n    );\n  }\n}\n\nReactDOM.render(\n  <Toggle />,\n  document.getElementById('root')\n);\n")])])]),e("h2",{attrs:{id:"条件渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#条件渲染"}},[t._v("#")]),t._v(" 条件渲染")]),t._v(" "),e("p",[t._v("React 中的条件渲染和 JavaScript 中的一样，使用 JavaScript 运算符 "),e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("if")]),e("OutboundLink")],1),t._v(" 或者"),e("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator",target:"_blank",rel:"noopener noreferrer"}},[t._v("条件运算符"),e("OutboundLink")],1),t._v("去创建元素来表现当前的状态，然后让 React 根据它们来更新 UI。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function BackGreeting(props){\n    return <h1>welcome back!</h1>\n}\n\nfunction YGreeting(props){\n    return <h1> welcom young</h1>\n}\n\nfunction Greeting(props){\n    const t = props.isLog;\n    if(t){\n        return <BackGreeting/>;\n    }\n    return <YGreeting />;\n}\n\nReactDOM.render(<Greeting isLog={false} />, document.getElementById("root"));\n')])])]),e("h3",{attrs:{id:"元素变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元素变量"}},[t._v("#")]),t._v(" 元素变量")]),t._v(" "),e("p",[t._v("你可以使用变量来储存元素。 它可以帮助你有条件地渲染组件的一部分，而其他的渲染部分并不会因此而改变。")]),t._v(" "),e("p",[t._v("如下例，定义 let button，这个button变量用来储存React元素，并返回")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class LoginControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleLoginClick = this.handleLoginClick.bind(this);\n    this.handleLogoutClick = this.handleLogoutClick.bind(this);\n    this.state = {isLoggedIn: false};\n  }\n\n  handleLoginClick() {\n    this.setState({isLoggedIn: true});\n  }\n\n  handleLogoutClick() {\n    this.setState({isLoggedIn: false});\n  }\n\n  render() {\n    const isLoggedIn = this.state.isLoggedIn;\n    let button;\n\n    if (isLoggedIn) {\n      button = <LogoutButton onClick={this.handleLogoutClick} />;\n    } else {\n      button = <LoginButton onClick={this.handleLoginClick} />;\n    }\n\n    return (\n      <div>\n        <Greeting isLoggedIn={isLoggedIn} />\n        {button}\n      </div>\n    );\n  }\n}\n\nfunction UserGreeting(props) {\n  return <h1>Welcome back!</h1>;\n}\n\nfunction GuestGreeting(props) {\n  return <h1>Please sign up.</h1>;\n}\n\nfunction Greeting(props) {\n  const isLoggedIn = props.isLoggedIn;\n  if (isLoggedIn) {\n    return <UserGreeting />;\n  }\n  return <GuestGreeting />;\n}\n\nfunction LoginButton(props) {\n  return (\n    <button onClick={props.onClick}>\n      Login\n    </button>\n  );\n}\n\nfunction LogoutButton(props) {\n  return (\n    <button onClick={props.onClick}>\n      Logout\n    </button>\n  );\n}\n\nReactDOM.render(\n  <LoginControl />,\n  document.getElementById('root')\n);\n\n")])])]),e("h2",{attrs:{id:"表单"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表单"}},[t._v("#")]),t._v(" 表单")]),t._v(" "),e("p",[t._v("在 React 里，HTML 表单元素的工作方式和其他的 DOM 元素有些不同，这是因为表单元素通常会保持一些内部的 state。例如这个纯 HTML 表单只接受一个名称")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("form")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("label")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    名字:\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("text"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("label")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("submit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("提交"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("form")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("h3",{attrs:{id:"受控组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#受控组件"}},[t._v("#")]),t._v(" 受控组件")]),t._v(" "),e("p",[t._v("在 HTML 中，表单元素（如"),e("code",[t._v("<input>")]),t._v("、 "),e("code",[t._v("<textarea>")]),t._v(" 和 "),e("code",[t._v("<select>")]),t._v("）之类的表单元素通常自己维护 state，并根据用户输入进行更新。而在 React 中，可变状态（mutable state）通常保存在组件的 state 属性中，并且只能通过使用 "),e("a",{attrs:{href:"https://react.docschina.org/docs/react-component.html#setstate",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("setState()")]),e("OutboundLink")],1),t._v("来更新。")]),t._v(" "),e("p",[t._v("我们可以把两者结合起来，使 React 的 state 成为“唯一数据源”。渲染表单的 React 组件还控制着用户输入过程中表单发生的操作。被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”。")]),t._v(" "),e("p",[t._v("例如，如果我们想让前一个示例在提交时打印出名称，我们可以将表单写为受控组件：")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('class NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: \'\'};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {    this.setState({value: event.target.value});  }\n  handleSubmit(event) {\n    alert(\'提交的名字: \' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          名字:\n          <input type="text" value={this.state.value} onChange={this.handleChange} />        </label>\n        <input type="submit" value="提交" />\n      </form>\n    );\n  }\n}\n')])])]),e("h3",{attrs:{id:"select标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#select标签"}},[t._v("#")]),t._v(" select标签")]),t._v(" "),e("p",[t._v("在 HTML 中，"),e("code",[t._v("<select>")]),t._v(" 创建下拉列表标签。例如，如下 HTML 创建了水果相关的下拉列表：")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("select")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("option")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("grapefruit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("葡萄柚"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("option")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("option")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("lime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("酸橙"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("option")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("option")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("selected")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("coconut"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("椰子"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("option")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("option")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("mango"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("芒果"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("option")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("select")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("请注意，由于 "),e("code",[t._v("selected")]),t._v(" 属性的缘故，椰子选项默认被选中。**React 并不会使用 "),e("code",[t._v("selected")]),t._v(" 属性，而是在根 "),e("code",[t._v("select")]),t._v(" 标签上使用 "),e("code",[t._v("value")]),t._v(" 属性。**这在受控组件中更便捷，因为您只需要在根标签中更新它。例如：")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('class FlavorForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: \'coconut\'};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {    this.setState({value: event.target.value});  }\n  handleSubmit(event) {\n    alert(\'你喜欢的风味是: \' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          选择你喜欢的风味:\n          <select value={this.state.value} onChange={this.handleChange}>            <option value="grapefruit">葡萄柚</option>\n            <option value="lime">酸橙</option>\n            <option value="coconut">椰子</option>\n            <option value="mango">芒果</option>\n          </select>\n        </label>\n        <input type="submit" value="提交" />\n      </form>\n    );\n  }\n}\n')])])]),e("h3",{attrs:{id:"处理多个输入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#处理多个输入"}},[t._v("#")]),t._v(" 处理多个输入")]),t._v(" "),e("p",[t._v("当需要处理多个 "),e("code",[t._v("input")]),t._v(" 元素时，我们可以给每个元素添加 "),e("code",[t._v("name")]),t._v(" 属性，并让处理函数根据 "),e("code",[t._v("event.target.name")]),t._v(" 的值选择要执行的操作。")]),t._v(" "),e("p",[t._v("例如：")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('class Reservation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isGoing: true,\n      numberOfGuests: 2\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.name === \'isGoing\' ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value    });\n  }\n\n  render() {\n    return (\n      <form>\n        <label>\n          参与:\n          <input\n            name="isGoing"            type="checkbox"\n            checked={this.state.isGoing}\n            onChange={this.handleInputChange} />\n        </label>\n        <br />\n        <label>\n          来宾人数:\n          <input\n            name="numberOfGuests"            type="number"\n            value={this.state.numberOfGuests}\n            onChange={this.handleInputChange} />\n        </label>\n      </form>\n    );\n  }\n}\n')])])]),e("h2",{attrs:{id:"状态提升"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#状态提升"}},[t._v("#")]),t._v(" 状态提升")]),t._v(" "),e("p",[t._v("在本节中，我们将创建一个用于计算水在给定温度下是否会沸腾的温度计算器。")]),t._v(" "),e("p",[t._v("我们将从一个名为 "),e("code",[t._v("BoilingVerdict")]),t._v(" 的组件开始，它接受 "),e("code",[t._v("celsius")]),t._v(" 温度作为一个 prop，并据此打印出该温度是否足以将水煮沸的结果。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function BoilingVerdict(props) {\n  if (props.celsius >= 100) {\n    return <p>The water would boil.</p>;  }\n  return <p>The water would not boil.</p>;}\n")])])]),e("p",[t._v("接下来, 我们创建一个名为 "),e("code",[t._v("Calculator")]),t._v(" 的组件。它渲染一个用于输入温度的 "),e("code",[t._v("<input>")]),t._v("，并将其值保存在 "),e("code",[t._v("this.state.temperature")]),t._v(" 中。")]),t._v(" "),e("p",[e("strong",[t._v("另外, 它根据当前输入值渲染 "),e("code",[t._v("BoilingVerdict")]),t._v(" 组件。")])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});  }\n\n  render() {\n    const temperature = this.state.temperature;    return (\n      <fieldset>\n        <legend>Enter temperature in Celsius:</legend>\n        <input          value={temperature}          onChange={this.handleChange} />        <BoilingVerdict          celsius={parseFloat(temperature)} />      </fieldset>\n    );\n  }\n}\n")])])]),e("h3",{attrs:{id:"添加第二个输入框"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加第二个输入框"}},[t._v("#")]),t._v(" 添加第二个输入框")]),t._v(" "),e("p",[t._v("我们的新需求是，在已有摄氏温度输入框的基础上，我们提供华氏度的输入框，并保持两个输入框的数据同步。")]),t._v(" "),e("p",[t._v("我们先从 "),e("code",[t._v("Calculator")]),t._v(" 组件中抽离出 "),e("code",[t._v("TemperatureInput")]),t._v(" 组件，然后为其添加一个新的 "),e("code",[t._v("scale")]),t._v(" prop，它可以是 "),e("code",[t._v('"c"')]),t._v(" 或是 "),e("code",[t._v('"f"')]),t._v("：")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const scaleNames = {  c: 'Celsius',  f: 'Fahrenheit'};\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};\n  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});\n  }\n\n  render() {\n    const temperature = this.state.temperature;\n    const scale = this.props.scale;    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>        <input value={temperature}\n               onChange={this.handleChange} />\n      </fieldset>\n    );\n  }\n}\n")])])]),e("h4",{attrs:{id:"js对象取值的两种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js对象取值的两种方式"}},[t._v("#")]),t._v(" JS对象取值的两种方式")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("abc")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ss"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("nn")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("90")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" v1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("abc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用点的方式")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" v2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用中括号的方式")]),t._v("\n")])])]),e("p",[t._v("在实际项目中一般使用点，会方便许多，但是"),e("strong",[t._v("如果key是变量的话就不能使用点了，js会理解变量为对象的key值，造成混淆")]),t._v("，这是必须使用【】方式来获得对象key变量的值")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" v3 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//key是一个变量")]),t._v("\n")])])]),e("p",[t._v("我们现在可以修改 "),e("code",[t._v("Calculator")]),t._v(" 组件让它"),e("strong",[t._v("渲染两个独立的温度输入框")]),t._v("组件：")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('class Calculator extends React.Component {\n  render() {\n    return (\n      <div>\n        <TemperatureInput scale="c" />        <TemperatureInput scale="f" />      </div>\n    );\n  }\n}\n')])])]),e("p",[t._v("我们现在有了两个输入框，但当你在其中一个输入温度时，另一个并不会更新。这与我们的要求相矛盾：我们希望让它们保持同步。")]),t._v(" "),e("p",[t._v("另外，我们也不能通过 "),e("code",[t._v("Calculator")]),t._v(" 组件展示 "),e("code",[t._v("BoilingVerdict")]),t._v(" 组件的渲染结果。因为 "),e("code",[t._v("Calculator")]),t._v(" 组件并不知道隐藏在 "),e("code",[t._v("TemperatureInput")]),t._v(" 组件中的当前温度是摄氏度还是华氏度。")]),t._v(" "),e("h3",{attrs:{id:"编写转换函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编写转换函数"}},[t._v("#")]),t._v(" 编写转换函数")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return (celsius * 9 / 5) + 32;\n}\n")])])]),e("p",[t._v("上述两个函数仅做数值转换。而我们将编写另一个函数，它接受字符串类型的 "),e("code",[t._v("temperature")]),t._v(" 和转换函数作为参数并返回一个字符串。我们将使用它来依据一个输入框的值计算出另一个输入框的值。")]),t._v(" "),e("p",[t._v("当输入 "),e("code",[t._v("temperature")]),t._v(" 的值无效时，函数返回空字符串，反之，则返回保留三位小数并四舍五入后的转换结果：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n  if (Number.isNaN(input)) {\n    return '';\n  }\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n")])])]),e("p",[t._v("例如，"),e("code",[t._v("tryConvert('abc', toCelsius)")]),t._v(" 返回一个空字符串，而 "),e("code",[t._v("tryConvert('10.22', toFahrenheit)")]),t._v(" 返回 "),e("code",[t._v("'50.396'")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"状态提升-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#状态提升-2"}},[t._v("#")]),t._v(" 状态提升")]),t._v(" "),e("p",[t._v("到目前为止, 两个 "),e("code",[t._v("TemperatureInput")]),t._v(" 组件均在各自内部的 state 中相互独立地保存着各自的数据。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});  }\n\n  render() {\n    const temperature = this.state.temperature;    // ...  \n")])])]),e("p",[t._v("然而，我们希望两个输入框内的数值彼此能够同步。当我们更新摄氏度输入框内的数值时，华氏度输入框内应当显示转换后的华氏温度，反之亦然。")]),t._v(" "),e("p",[e("strong",[t._v("在 React 中，将多个组件中需要共享的 state 向上移动到它们的最近共同父组件中，便可实现共享 state。这就是所谓的“状态提升”。接下来，我们将 "),e("code",[t._v("TemperatureInput")]),t._v(" 组件中的 state 移动至 "),e("code",[t._v("Calculator")]),t._v(" 组件中去。")])]),t._v(" "),e("p",[t._v("如果 "),e("code",[t._v("Calculator")]),t._v(" 组件拥有了共享的 state，它将成为两个温度输入框中当前温度的“数据源”。它能够使得两个温度输入框的数值彼此保持一致。由于两个 "),e("code",[t._v("TemperatureInput")]),t._v(" 组件的 props 均来自共同的父组件 "),e("code",[t._v("Calculator")]),t._v("，因此两个输入框中的内容将始终保持一致。")]),t._v(" "),e("p",[t._v("让我们看看这是如何一步一步实现的。")]),t._v(" "),e("p",[t._v("首先，我们将 "),e("code",[t._v("TemperatureInput")]),t._v(" 组件中的 "),e("code",[t._v("this.state.temperature")]),t._v(" 替换为 "),e("code",[t._v("this.props.temperature")]),t._v("。现在，我们先假定 "),e("code",[t._v("this.props.temperature")]),t._v(" 已经存在，尽管将来我们需要通过 "),e("code",[t._v("Calculator")]),t._v(" 组件将其传入：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  render() {\n    // Before: const temperature = this.state.temperature;\n    const temperature = this.props.temperature;    // ...\n")])])]),e("p",[t._v("我们知道 "),e("a",{attrs:{href:"https://react.docschina.org/docs/components-and-props.html#props-are-read-only",target:"_blank",rel:"noopener noreferrer"}},[t._v("props 是只读的"),e("OutboundLink")],1),t._v("。当 "),e("code",[t._v("temperature")]),t._v(" 存在于 "),e("code",[t._v("TemperatureInput")]),t._v(" 组件的 state 中时，组件调用 "),e("code",[t._v("this.setState()")]),t._v(" 便可修改它。然而，"),e("code",[t._v("temperature")]),t._v(" 是由父组件传入的 prop，"),e("code",[t._v("TemperatureInput")]),t._v(" 组件便失去了对它的控制权。")]),t._v(" "),e("p",[t._v("在 React 中，这个问题通常是通过使用“受控组件”来解决的。与 DOM 中的 "),e("code",[t._v("<input>")]),t._v(" 接受 "),e("code",[t._v("value")]),t._v(" 和 "),e("code",[t._v("onChange")]),t._v(" 一样，自定义的 "),e("code",[t._v("TemperatureInput")]),t._v(" 组件接受 "),e("code",[t._v("temperature")]),t._v(" 和 "),e("code",[t._v("onTemperatureChange")]),t._v(" 这两个来自父组件 "),e("code",[t._v("Calculator")]),t._v(" 的 props。")]),t._v(" "),e("p",[t._v("现在，当 "),e("code",[t._v("TemperatureInput")]),t._v(" 组件想更新温度时，需调用 "),e("code",[t._v("this.props.onTemperatureChange")]),t._v(" 来更新它：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  handleChange(e) {\n    // Before: this.setState({temperature: e.target.value});\n    this.props.onTemperatureChange(e.target.value);    // ...\n")])])]),e("p",[e("code",[t._v("onTemperatureChange")]),t._v(" 的 prop 和 "),e("code",[t._v("temperature")]),t._v(" 的 prop 一样，均由父组件 "),e("code",[t._v("Calculator")]),t._v(" 提供。它通过修改父组件自身的内部 state 来处理数据的变化，进而使用新的数值重新渲染两个输入框。我们将很快看到修改后的 "),e("code",[t._v("Calculator")]),t._v(" 组件效果。")]),t._v(" "),e("p",[t._v("在深入研究 "),e("code",[t._v("Calculator")]),t._v(" 组件的变化之前，让我们回顾一下 "),e("code",[t._v("TemperatureInput")]),t._v(" 组件的变化。我们移除组件自身的 state，通过使用 "),e("code",[t._v("this.props.temperature")]),t._v(" 替代 "),e("code",[t._v("this.state.temperature")]),t._v(" 来读取温度数据。当我们想要响应数据改变时，我们需要调用 "),e("code",[t._v("Calculator")]),t._v(" 组件提供的 "),e("code",[t._v("this.props.onTemperatureChange()")]),t._v("，而不再使用 "),e("code",[t._v("this.setState()")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);  }\n\n  render() {\n    const temperature = this.props.temperature;    const scale = this.props.scale;\n    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\n        <input value={temperature}\n               onChange={this.handleChange} />\n      </fieldset>\n    );\n  }\n}\n")])])]),e("p",[t._v("现在，让我们把目光转向 "),e("code",[t._v("Calculator")]),t._v(" 组件。")]),t._v(" "),e("p",[t._v("我们会把当前输入的 "),e("code",[t._v("temperature")]),t._v(" 和 "),e("code",[t._v("scale")]),t._v(" 保存在组件内部的 state 中。这个 state 就是从两个输入框组件中“提升”而来的，并且它将用作两个输入框组件的共同“数据源”。这是我们为了渲染两个输入框所需要的所有数据的最小表示。")]),t._v(" "),e("p",[t._v("例如，当我们在摄氏度输入框中键入 37 时，"),e("code",[t._v("Calculator")]),t._v(" 组件中的 state 将会是：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{\n  temperature: '37',\n  scale: 'c'\n}\n")])])]),e("p",[t._v("如果我们之后修改华氏度的输入框中的内容为 212 时，"),e("code",[t._v("Calculator")]),t._v(" 组件中的 state 将会是：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{\n  temperature: '212',\n  scale: 'f'\n}\n")])])]),e("p",[t._v("我们可以存储两个输入框中的值，但这并不是必要的。我们只需要存储最近修改的温度及其计量单位即可，根据当前的 "),e("code",[t._v("temperature")]),t._v(" 和 "),e("code",[t._v("scale")]),t._v(" 就可以计算出另一个输入框的值。")]),t._v(" "),e("p",[t._v("由于两个输入框中的数值由同一个 state 计算而来，因此它们始终保持同步：")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = {temperature: '', scale: 'c'};  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({scale: 'c', temperature});  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({scale: 'f', temperature});  }\n\n  render() {\n    const scale = this.state.scale;    const temperature = this.state.temperature;    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n    return (\n      <div>\n        <TemperatureInput\n          scale=\"c\"\n          temperature={celsius}          onTemperatureChange={this.handleCelsiusChange} />        <TemperatureInput\n          scale=\"f\"\n          temperature={fahrenheit}          onTemperatureChange={this.handleFahrenheitChange} />        <BoilingVerdict\n          celsius={parseFloat(celsius)} />      </div>\n    );\n  }\n}\n")])])]),e("p",[t._v("让我们来重新梳理一下当你对输入框内容进行编辑时会发生些什么：")]),t._v(" "),e("ul",[e("li",[t._v("React 会调用 DOM 中 "),e("code",[t._v("<input>")]),t._v(" 的 "),e("code",[t._v("onChange")]),t._v(" 方法。在本实例中，它是 "),e("code",[t._v("TemperatureInput")]),t._v(" 组件的 "),e("code",[t._v("handleChange")]),t._v(" 方法。")]),t._v(" "),e("li",[e("code",[t._v("TemperatureInput")]),t._v(" 组件中的 "),e("code",[t._v("handleChange")]),t._v(" 方法会调用 "),e("code",[t._v("this.props.onTemperatureChange()")]),t._v("，并传入新输入的值作为参数。其 props 诸如 "),e("code",[t._v("onTemperatureChange")]),t._v(" 之类，均由父组件 "),e("code",[t._v("Calculator")]),t._v(" 提供。")]),t._v(" "),e("li",[t._v("起初渲染时，用于摄氏度输入的子组件 "),e("code",[t._v("TemperatureInput")]),t._v(" 中的 "),e("code",[t._v("onTemperatureChange")]),t._v(" 方法与 "),e("code",[t._v("Calculator")]),t._v(" 组件中的 "),e("code",[t._v("handleCelsiusChange")]),t._v(" 方法相同，而，用于华氏度输入的子组件 "),e("code",[t._v("TemperatureInput")]),t._v(" 中的 "),e("code",[t._v("onTemperatureChange")]),t._v(" 方法与 "),e("code",[t._v("Calculator")]),t._v(" 组件中的 "),e("code",[t._v("handleFahrenheitChange")]),t._v(" 方法相同。因此，无论哪个输入框被编辑都会调用 "),e("code",[t._v("Calculator")]),t._v(" 组件中对应的方法。")]),t._v(" "),e("li",[t._v("在这些方法内部，"),e("code",[t._v("Calculator")]),t._v(" 组件通过使用新的输入值与当前输入框对应的温度计量单位来调用 "),e("code",[t._v("this.setState()")]),t._v(" 进而请求 React 重新渲染自己本身。")]),t._v(" "),e("li",[t._v("React 调用 "),e("code",[t._v("Calculator")]),t._v(" 组件的 "),e("code",[t._v("render")]),t._v(" 方法得到组件的 UI 呈现。温度转换在这时进行，两个输入框中的数值通过当前输入温度和其计量单位来重新计算获得。")]),t._v(" "),e("li",[t._v("React 使用 "),e("code",[t._v("Calculator")]),t._v(" 组件提供的新 props 分别调用两个 "),e("code",[t._v("TemperatureInput")]),t._v(" 子组件的 "),e("code",[t._v("render")]),t._v(" 方法来获取子组件的 UI 呈现。")]),t._v(" "),e("li",[t._v("React 调用 "),e("code",[t._v("BoilingVerdict")]),t._v(" 组件的 "),e("code",[t._v("render")]),t._v(" 方法，并将摄氏温度值以组件 props 方式传入。")]),t._v(" "),e("li",[t._v("React DOM 根据输入值匹配水是否沸腾，并将结果更新至 DOM。我们刚刚编辑的输入框接收其当前值，另一个输入框内容更新为转换后的温度值。")])]),t._v(" "),e("p",[t._v("得益于每次的更新都经历相同的步骤，两个输入框的内容才能始终保持同步。")]),t._v(" "),e("h2",{attrs:{id:"组合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组合"}},[t._v("#")]),t._v(" 组合")]),t._v(" "),e("h3",{attrs:{id:"包含关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#包含关系"}},[t._v("#")]),t._v(" 包含关系")]),t._v(" "),e("p",[t._v("有些组件无法提前知晓它们子组件的具体内容。在 "),e("code",[t._v("Sidebar")]),t._v("（侧边栏）和 "),e("code",[t._v("Dialog")]),t._v("（对话框）等展现通用容器（box）的组件中特别容易遇到这种情况。")]),t._v(" "),e("p",[t._v("我们建议这些组件使用一个特殊的 "),e("code",[t._v("children")]),t._v(" prop 来将他们的子组件传递到渲染结果中：")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function FancyBorder(props) {\n  return (\n    <div className={'FancyBorder FancyBorder-' + props.color}>\n      {props.children}    </div>\n  );\n}\n")])])]),e("p",[t._v("这使得别的组件可以通过 JSX 嵌套，将任意组件作为子组件传递给它们。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function WelcomeDialog() {\n  return (\n    <FancyBorder color="blue">\n      <h1 className="Dialog-title">        Welcome      </h1>      <p className="Dialog-message">        Thank you for visiting our spacecraft!      </p>    </FancyBorder>\n  );\n}\n')])])]),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function FancyBorder(props) {\n  return (\n    <div>\n   <p>颜色是{props.color}</p>\n    {props.children}\n    </div>\n  );\n}\n\nfunction WelcomeDialog() {\n  return (\n    <FancyBorder color=\"blue\">\n      <h1>LiuwenqiangNB</h1>\n    </FancyBorder>\n  );\n}\n\nReactDOM.render(\n  <WelcomeDialog />,\n  document.getElementById('root')\n);\n")])])]),e("p",[t._v("可以看到在WelcomeDialog组件中,引用了FancyBorder组件，并且FancyBorder组件还有一个子组件")]),e("h1",[t._v("LiuwenqiangNB")]),t._v("，"),e("p"),t._v(" "),e("p",[t._v("在FancyBorder组件中通过props.children使得他们渲染")]),t._v(" "),e("p",[e("code",[t._v("<FancyBorder>")]),t._v(" JSX 标签中的所有内容都会作为一个 "),e("code",[t._v("children")]),t._v(" prop 传递给 "),e("code",[t._v("FancyBorder")]),t._v(" 组件。因为 "),e("code",[t._v("FancyBorder")]),t._v(" 将 "),e("code",[t._v("{props.children}")]),t._v(" 渲染在一个 "),e("code",[t._v("<div>")]),t._v(" 中，被传递的这些子组件最终都会出现在输出结果中。")])])}),[],!1,null,null,null);e.default=s.exports}}]);