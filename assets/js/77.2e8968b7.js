(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{362:function(t,a,n){"use strict";n.r(a);var e=n(10),_=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"nginx-含正则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-含正则"}},[t._v("#")]),t._v(" Nginx(含正则)")]),t._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[t._v("nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；nginx可以作为一个HTTP服务器进行网站的发布处理，另外nginx可以作为反向代理进行负载均衡的实现。")]),t._v(" "),a("p",[t._v("这里主要通过三个方面简单介绍nginx")]),t._v(" "),a("ul",[a("li",[t._v("反向代理")]),t._v(" "),a("li",[t._v("负载均衡")]),t._v(" "),a("li",[t._v("nginx特点")])]),t._v(" "),a("h2",{attrs:{id:"正反代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正反代理"}},[t._v("#")]),t._v(" 正反代理")]),t._v(" "),a("p",[a("strong",[t._v("正向代理")])]),t._v(" "),a("p",[t._v("说反向代理之前，我们先看看正向代理，正向代理也是大家最常接触的到的代理模式，我们会从两个方面来说关于正向代理的处理模式，分别从软件方面和生活方面来解释一下什么叫正向代理")]),t._v(" "),a("p",[t._v("在如今的网络环境下，我们如果由于技术需要要去访问国外的某些网站，此时你会发现位于国外的某网站我们通过浏览器是没有办法访问的，此时大家可能都会用一个操作FQ进行访问，FQ的方式主要是找到一个可以访问国外网站的代理服务器，我们将请求发送给代理服务器，代理服务器去访问国外的网站，然后将访问到的数据传递给我们！")]),t._v(" "),a("p",[t._v("上述这样的代理模式称为正向代理，正向代理最大的特点是客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；正向代理模式屏蔽或者隐藏了真实客户端信息。")]),t._v(" "),a("p",[a("img",{attrs:{src:"D:%5CDesktop%5CLearing%5Cimage-20200803145742460.png",alt:"image-20200803145742460"}})]),t._v(" "),a("p",[a("strong",[t._v("反向代理")])]),t._v(" "),a("p",[t._v("明白了什么是正向代理，我们继续看关于反向代理的处理方式，举例如我大天朝的某宝网站，每天同时连接到网站的访问人数已经爆表，单个服务器远远不能满足人民日益增长的购买欲望了，此时就出现了一个大家耳熟能详的名词：分布式部署；也就是通过部署多台服务器来解决访问人数限制的问题；\n那么反向代理具体是通过什么样的方式实现的分布式的集群操作呢，我们先看一个示意图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"D:%5CDesktop%5CLearing%5Cimage-20200803145841656.png",alt:"image-20200803145841656"}})]),t._v(" "),a("p",[t._v("通过上述的图解大家就可以看清楚了，多个客户端给服务器发送的请求，nginx服务器接收到之后，按照一定的规则分发给了后端的业务处理服务器进行处理了。此时~请求的来源也就是客户端是明确的，但是请求具体由哪台服务器处理的并不明确了，nginx扮演的就是一个反向代理角色")]),t._v(" "),a("p",[t._v("反向代理，主要用于服务器集群分布式部署的情况下，反向代理隐藏了服务器的信息！")]),t._v(" "),a("h2",{attrs:{id:"负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[t._v("#")]),t._v(" 负载均衡")]),t._v(" "),a("p",[t._v("nginx反向代理服务器接收到的请求数量，就是我们说的负载量")]),t._v(" "),a("p",[t._v("请求数量按照一定的规则进行分发到不同的服务器处理的规则，就是一种均衡规则")]),t._v(" "),a("p",[t._v("所以~将服务器接收到的请求按照规则分发的过程，称为负载均衡。")]),t._v(" "),a("p",[a("strong",[t._v("nginx支持的负载均衡调度算法方式如下：")])]),t._v(" "),a("ol",[a("li",[t._v("weight轮询（默认）：接收到的请求按照顺序逐一分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。 这种方式下，可以给不同的后端服务器设置一个权重值（weight），用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。")]),t._v(" "),a("li",[t._v("ip_hash：每个请求按照发起客户端的ip的hash结果进行匹配，这样的算法下一个固定ip地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题。")]),t._v(" "),a("li",[t._v("fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块")]),t._v(" "),a("li",[t._v("url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在nginx作为静态服务器的情况下提高缓存效率。同样要注意nginx默认不支持这种调度算法，要使用的话需要安装nginx的hash软件包")])]),t._v(" "),a("h3",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),a("p",[t._v("nginx是一个功能非常强大的web服务器加反向代理服务器，同时又是邮件服务器等等")]),t._v(" "),a("p",[t._v("在项目使用中，使用最多的三个核心功能是反向代理、负载均衡和静态服务器")]),t._v(" "),a("p",[t._v("这三个不同的功能的使用，都跟nginx的配置密切相关，nginx服务器的配置信息主要集中在nginx.conf这个配置文件中，并且所有的可配置选项大致分为以下几个部分")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("main                                # 全局配置\n\nevents {                            # nginx工作模式配置\n\n}\n\nhttp {                                # http设置\n    ....\n\n    server {                        # 服务器主机配置\n        ....\n        location {                    # 路由配置\n            ....\n        }\n\n        location path {\n            ....\n        }\n\n        location otherpath {\n            ....\n        }\n    }\n\n    server {\n        ....\n\n        location {\n            ....\n        }\n    }\n\n    upstream name {                    # 负载均衡配置\n        ....\n    }\n}\n")])])]),a("p",[t._v("如上述配置文件所示，主要由6个部分组成：")]),t._v(" "),a("ol",[a("li",[t._v("main：用于进行nginx全局信息的配置")]),t._v(" "),a("li",[t._v("events：用于nginx工作模式的配置")]),t._v(" "),a("li",[t._v("http：用于进行http协议信息的一些配置")]),t._v(" "),a("li",[t._v("server：用于进行服务器访问信息的配置")]),t._v(" "),a("li",[t._v("location：用于进行访问路由的配置")]),t._v(" "),a("li",[t._v("upstream：用于进行负载均衡的配置")])]),t._v(" "),a("h3",{attrs:{id:"核心设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心设置"}},[t._v("#")]),t._v(" 核心设置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('#配置nginx服务启动的用户，默认为www-data\nuser www-data \n#配日志错误日志的存放位置，以及默认存储日志的级别\nerror_log /var/log/nginx/error.log warn;\n#配置nginx进程的pid存放位置，通过此可知有多个nginx进程\npid /var/run/nginx.pid;\n#events 模块,\nevents{\n\t#使用epollo事件驱动模型\n\tuse epollo;\n\tworker_connection 1024;\n}\n#http模块，配置代理，日志，缓存等， 可以存放server快\nhttp{\n\t#设定mime类型,类型由mime.type文件定义\n\tinclude /etc/nginx/mime.types;\n\t#默认返回的相应的mime类型\n\tdefault_type application/octet-stream;\n\t#log_format定义日志格式，main时格式名，可以有多个格式\n\tlog_format main \'$remote_addr - $remote_user [$time_local] "$request" \'\n\'$status $body_bytes_sent "$http_referer" \'\n\'"$http_user_agent" "$http_x_forwarded_for"\';\n   #请求日志存储位置以及使用的格式\n   access_log /var/log/nginx/access.log main;\n   ...还有一些其他的\n   #server模块，可以有多个\n   server{\n   \t\t#监听80端口\n   \t\tlisten 80\n   \t\t#监听地址（服务器公网地址）\n   \t\tserver_name ip\n   \t\t#location模块，路由映射信息 / 效果是访问ip:80/时就会访问/var/www/html下的index.html\n   \t\tlocation / {\n   \t\t\t#root 用于设置网站根目录\n   \t\t\troot /var/www/html;\n   \t\t\t#index 设置默认页\n   \t\t\tindex index.html;\n   \t\t}\n   \t\t#发生错误时，返回根目录/404.html作为响应\n   \t\t#error_page 404 /404.html;\n   \t\t#全局配置，对多个虚拟服务端涩会给你小，发生5x错误时返回网站根目录/50x.html相应\n   \t\terror_page 500 502 503 504 /50x.html\n   \t\tlocation = /50x.html{\n   \t\troot /var/www/html;\n   \t\t}\n   }\n   \n}\n')])])]),a("h4",{attrs:{id:"效果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#效果"}},[t._v("#")]),t._v(" 效果")]),t._v(" "),a("p",[t._v("1")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("在安装好nginx之后直接启动（其实默认直接启动）")])]),t._v(" "),a("li",[a("p",[t._v("访问该服务器的ip地址(如http://101.132.154.176,http访问端口为80)可以看到一个Welcome to Nginx 界面")])]),t._v(" "),a("li",[a("p",[t._v("其实这个访问请求刚好匹配到的location / 这个路由，返回的资源页面就是root +index路径得到的内容，上面的欢迎界面在/var/www/html下的index.html")])]),t._v(" "),a("li",[a("p",[t._v('将index.html的Welcom to nginx 改为"欢迎来到德莱联盟"')])]),t._v(" "),a("li",[a("p",[t._v("再次访问")]),t._v(" "),a("p",[a("img",{attrs:{src:"D:%5CDesktop%5CLearing%5Cimage-20200803191354169.png",alt:"image-20200803191354169"}})])])]),t._v(" "),a("p",[t._v("2")]),t._v(" "),a("p",[t._v("新加一个location 如下图，也就是访问http://101.132.154.176/hello.html的路由，所以我们需要在根目录下有一个hello.html才行")]),t._v(" "),a("p",[a("img",{attrs:{src:"D:%5CDesktop%5CLearing%5Cimage-20200803191617032.png",alt:"image-20200803191617032"}})]),t._v(" "),a("p",[t._v("然后访问一下http://101.132.154.176/hello.html")]),t._v(" "),a("p",[a("img",{attrs:{src:"D:%5CDesktop%5CLearing%5Cimage-20200803193242361.png",alt:"image-20200803193242361"}})]),t._v(" "),a("h3",{attrs:{id:"location的url匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#location的url匹配"}},[t._v("#")]),t._v(" location的url匹配")]),t._v(" "),a("p",[t._v("location指令分为"),a("strong",[t._v("两种匹配模式：")]),t._v("\n1> "),a("strong",[t._v("普通字符串匹配")]),t._v("：以**=开头"),a("strong",[t._v("或")]),t._v("开头无引导字符（～）**的规则\n2> "),a("strong",[t._v("正则匹配")]),t._v("：以～或～*开头表示正则匹配，~*表示正则不区分大小写")]),t._v(" "),a("p",[t._v("当nginx收到一个请求后，会截取请求的URI部份，去搜索所有location指令中定义的URI匹配模式。在server模块中可以定义多个location指令来匹配不同的url请求，多个不同location配置的URI匹配模式，总体的匹配原则是："),a("strong",[t._v("先匹配普通字符串模式，再匹配正则模式")]),t._v("。只识别URI部份，例如请求为：/test/abc/user.do?name=xxxx")]),t._v(" "),a("p",[t._v("一个请求过来后，Nginx匹配这个请求的流程如下：\n1> 先查找是否有=开头的精确匹配，如：location = /test/abc/user.do { … }没有就向下\n2> 再查找普通匹配，以 "),a("strong",[t._v("最大前缀 为原则")]),t._v("，如有以下两个location，则会匹配后一项\n* location /test/ { … }\n* location /test/abc { … }\n3> 匹配到一个普通格式后，搜索并未结束，而是暂存当前匹配的结果，并继续搜索正则匹配模式\n4> 所有正则匹配模式location中找到第一个匹配项后，就以此项为最终匹配结果\n所以正则匹配项匹配规则，受定义的前后顺序影响，但普通匹配模式不会\n5> 如果未找到正则匹配项，则以3中缓存的结果为最终匹配结果\n6> 如果一个匹配都没搜索到，则返回404")]),t._v(" "),a("h2",{attrs:{id:"精确匹配与模糊匹配差别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精确匹配与模糊匹配差别"}},[t._v("#")]),t._v(" 精确匹配与模糊匹配差别")]),t._v(" "),a("p",[t._v("location =/ { … } 与 location / { … } 的差别：\n* 前一个是精确匹配，只响应/请求，所有/xxx或/xxx/xxxx类的请求都不会以前缀的形式匹配到它\n* 后一个是只要以 / 为前缀的请求都会被匹配到。如：/abc ， /test/abc， /test/abc/aaaa")]),t._v(" "),a("h2",{attrs:{id:"正则与非正则匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则与非正则匹配"}},[t._v("#")]),t._v(" 正则与非正则匹配")]),t._v(" "),a("p",[t._v("1> location ~ /test/.+.jsp$ { … } ：正则匹配，支持标准的正则表达式语法。\n2> location ^~ / { … } ： ^~意思是关闭正则匹配，当搜索到这个普通匹配模式后，将不再继续搜索正则匹配模式。")]),t._v(" "),a("p",[a("strong",[t._v("loaction格式是")]),t._v(" "),a("code",[t._v("location [=|~|~*|^~] pattern")])]),t._v(" "),a("p",[t._v("分成三部分就是location， "),a("code",[t._v("[=|~|~*|^~]")]),t._v(" 和"),a("code",[t._v("pattern")]),t._v("，location当然是固定的写法了，所以不需要介绍，我们只介绍 "),a("code",[t._v("[=|~|~*|^~]")]),t._v(" 和"),a("code",[t._v("pattern")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("URL匹配语法 URL语法匹配分成两部分， [=|~|~*|^~]"),a("code",[t._v("和")]),t._v("pattern。")])]),t._v(" "),a("p",[a("strong",[t._v("第二部分")]),t._v("时可选的，没有的话，此时情况不同，pattern不一定时正则")]),t._v(" "),a("ul",[a("li",[t._v("= pattern 代表精确匹配pattern，此时pattern不是正则，比如 location = /hello.html就只能匹配nginx主机ip/hello.html")]),t._v(" "),a("li",[t._v("^~ 代表匹配以pattern字符串开头的url，此时pattern不是正则，比如 location ^~ /test 可以匹配的就是以/test开头的url，比如 /test1， /testA/aaa等")]),t._v(" "),a("li",[t._v("~ pattern 代表pattern这个正则，区分大小写")]),t._v(" "),a("li",[t._v("~* pattern 代表这个正则，不区分大小写")])]),t._v(" "),a("p",[t._v("综上，= 和 ^~不是正则， ~ 和~* 是正则")]),t._v(" "),a("h3",{attrs:{id:"正则介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则介绍"}},[t._v("#")]),t._v(" 正则介绍")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("字符")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("$")]),t._v(" "),a("td",[t._v("限定结尾如\\ .(gif|png)$ 匹配任何以.gif .png 结尾的请求")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("^")]),t._v(" "),a("td",[t._v("限定开头如，^error 匹配任何以error开头的如error404")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("|")]),t._v(" "),a("td",[t._v("或")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("[]")]),t._v(" "),a("td",[t._v("方括号内代表范围[0-9]代表0-9的字符，[0-9A-Z]代表匹配0-9和A-Z都可以匹配到，"),a("strong",[t._v("如果在范围内使用 ^ 代表匹配范围以外的字符")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v(".")]),t._v(" "),a("td",[t._v("匹配任意一个字符，注意是一个")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("?")]),t._v(" "),a("td",[t._v("匹配前面的字符0次或1次")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("+")]),t._v(" "),a("td",[t._v("匹配前面字符1次或多次（即至少出现一次）")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("*")]),t._v(" "),a("td",[t._v("匹配前面字符任意多次，分为贪婪与懒惰，贪婪就是尽可能的匹配，懒惰就是匹配到合适比如abcdabcd,贪婪模式a.*d则匹配结果为abcdabcd，而如果是懒惰模式即a.*?b的话就匹配到第一个abcd位置了")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("{n}")]),t._v(" "),a("td",[t._v("匹配n次")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("{n,}")]),t._v(" "),a("td",[t._v("pp至少n次")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("{n,m}")]),t._v(" "),a("td",[t._v("匹配n到m次")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("()")]),t._v(" "),a("td",[t._v("划分字符范围 如 hello | hi Amy 只能匹配到hello 或者是hi Amy，而(hello| hi) Amy就可以匹配到hello Amy 或者 hi Amy 了")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("\\")]),t._v(" "),a("td",[t._v("转义，把有特殊含义的字符转化为普通字符，比如\\.就是把.转化为普通的一个点了如\\.html$ 就是匹配以 .html结尾")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("\\d")]),t._v(" "),a("td",[a("strong",[t._v("匹配任意一个数字")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("\\D")]),t._v(" "),a("td",[t._v("匹配"),a("strong",[t._v("任意一个 非数字")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("\\w")]),t._v(" "),a("td",[t._v("相当[0-9A-Za-z]")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("\\W")]),t._v(" "),a("td",[t._v("匹配任意一个符号字符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("\\s")]),t._v(" "),a("td",[t._v("匹配空白")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("\\S")]),t._v(" "),a("td",[t._v("匹配非空白")])])])]),t._v(" "),a("h3",{attrs:{id:"反向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反向代理"}},[t._v("#")]),t._v(" 反向代理")]),t._v(" "),a("p",[t._v("在location模块内使用proxy_pass")]),t._v(" "),a("p",[a("code",[t._v("proxy_pass")]),t._v("用于设置被代理服务器的地址，可以是主机名称（"),a("code",[t._v("https://www.baidu.com")]),t._v("这样的）、IP地址(域名加端口号)的形式。\n下面的这个location的意思是，如果请求路径开头是/api/的，那么都代理到proxy_pass指定的地址，比如访问了"),a("code",[t._v("/api/user/list")]),t._v(",那么得到的结果是"),a("code",[t._v("http://localhost:8081/user/list")]),t._v("的结果。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("server {\n  listen 8080;\n\n  location ^~ /api/ {\n    proxy_pass http://localhost:8081/;\n  }\n}\n")])])]),a("p",[t._v("实际使用至少有下三个")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。\n#这里是直接转发给后端应用服务器了，也可以是一个静态首页\n# 第一个必选规则\nlocation = / {\n    proxy_pass http://tomcat:8080/index\n}\n \n# 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项\n# 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用\nlocation ^~ /static/ {\n    root /webroot/static/;\n}\nlocation ~* \\.(gif|jpg|jpeg|png|css|js|ico)$ {\n    root /webroot/res/;\n}\n \n#第三个规则就是通用规则，用来转发动态请求到后端应用服务器\n#非静态文件请求就默认是动态请求，自己根据实际把握\n#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了\nlocation / {\n    proxy_pass http://ip:8080/\n}\n")])])]),a("p",[t._v("对于以上基础推荐配置，有一个补充，就是关于转发有一点需要注意。例如下面配置，对一个目录转发：")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("location "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("outer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#case A： url最后以/结尾")]),t._v("\n    proxy_pass http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("tomcat"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#case B： url最后没有/")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#proxy_pass http://tomcat:8080  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("关键在于最后的/，访问localhost/outer/in.html，其中case A会转发到tomcat:8080/in.html， 而case B会转发到tomcat:8080/outer/in.html，所以务必注意了。")]),t._v(" "),a("p",[t._v("^[+]{0,1}(\\d+)$")]),t._v(" "),a("h6",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")]),t._v(" "),a("img",{attrs:{src:"C:%5CUsers%5CLWQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210910160307330.png",alt:"image-20210910160307330"}})])])}),[],!1,null,null,null);a.default=_.exports}}]);